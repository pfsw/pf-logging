RELEASE NOTES FOR PACKAGE PF-Logging
====================================

-------------------------------------------------------------------------------

VERSION 3.3.0 (08/03/2020) - 59 Unit Tests

* Upgrade to gradle 6.2.2

* Added Automatic-Module-Name to manifest file

-------------------------------------------------------------------------------

VERSION 3.2.0 (27/12/2018) - 59 Unit Tests

* Clean code

-------------------------------------------------------------------------------

VERSION 3.1.0 (09.11.2017) - 59 Unit Tests

* LoggerProvider
  > Added
    - public static Logger getLogger(Class<?> clazz)
    - public static Logger getLogger(String loggerName)
    - public static Logger2 getLogger2(Class<?> clazz)
    - public static Logger2 getLogger2(String loggerName)

-------------------------------------------------------------------------------

VERSION 3.0.0 (04.02.2017) - 55 Unit Tests

* Migrated 
  > Maven -> Gradle
  > SVN -> Git
  
* Package renaming 'org.pf' -> 'org.pfsw'

* Removed dynamic loading of JavaUtilLoggerFactory

* Added new mechanism to initialize LoggerFactory based on
  org.pfsw.logging.LogBindingInitializer and ServiceLoader 
  
* Improved dynamic implementation loading by supporting different classloaders

* New classes
  > DeferredInitializationLoggerAdapter
  > DeferredInitializationLoggerFactory
  > InMemoryLogger
  > InMemoryLoggerFactory

-------------------------------------------------------------------------------

VERSION 2.3.0 (05.01.2017) - 51 Unit Tests

New Logger2 and Logger2Logger allow usage of placeholders as supported by String.format().

* New classes and interfaces
    > org.pfsw.logging.LogLevel
    > org.pfsw.logging.Logger2
    > org.pfsw.logging.Logger2Logger

-------------------------------------------------------------------------------

VERSION 2.2.0 (13.12.2015)

* LoggerFactory
  > Added
    - public String getName()
    - public Logger getLogger(Class<?> clazz)

* PrintStreamLoggerFactory
  > Added
    - inst-var name
    - public String getName()
    - public Logger getLogger(Class<?> clazz)

  > Changed constructor to receive a name

* LoggerFactoryProvider
  > Added
    - public static LoggerFactory getLoggerFactory(String name) 
    - public static void reset()
    - public static String getDefaultFactoryName()
    - public static void setDefaultFactoryName(String name)

* New classes and interfaces
  > LoggerBindingNames
  > JavaUtilLoggerFactory

-------------------------------------------------------------------------------

VERSION 2.1.0 (13.09.2015)

* Clean code

-------------------------------------------------------------------------------

VERSION 2.0.0 (22.06.2014)

* Logger
  - Added
    ~ getName()
    
  - Changed log methods to have var-arg parameters that can be used to replace
    placeholders in messages. 

* Added mechanism to plugin a LoggerFactory via ServiceLoder that allows 
  integration into other logging frameworks.

-------------------------------------------------------------------------------

VERSION 1.2 (August 23, 2006)

* Logger
  > Added
    - public boolean setLogLevel( String logLevel ) 
    
* NilLogger
  > Added
    - public boolean setLogLevel( String logLevel ) 

* PrintStreamLogger
  > Added
    - public boolean setLogLevel( String logLevel ) 

-------------------------------------------------------------------------------

VERSION 1.1.1 (March 6, 2004)

* PrintStreamLogger
  - Changed visibility of LEVEL_INDICATOR from protected to private

-------------------------------------------------------------------------------

VERSION 1.1 (December 20, 2003)

* PrintStreamLogger

  - Added property "logging.level"
  - Changed log level constants to be public
  - Documented supported properties
  - Check properties == null in initialize()
  - Changed visibility of setLogLevel() from protected to public

* Created test classes
  - AllTests
  - PrintStreamLoggerTest

-------------------------------------------------------------------------------

VERSION 1.0 (29.04.2002)

* Provide a generic interface Logger

* Provide logger that swallows all output (NilLogger)

* Provide logger that writes everything to a print stream, where the default
  is System.out (PrintStreamLogger)


